name: Source code scanning & analysis

on:
  workflow_call:
    inputs:
      detekt-scan:
        description: "Enable Kotlin scan with Detekt"
        default: true
        required: false
        type: boolean
      cyclonedx-sbom:
        description: "Enable CycloneDX SBOM generation"
        default: false
        required: false
        type: boolean
      upload-artifact:
        description: "Enable output artifacts upload"
        default: true
        required: false
        type: boolean
      artifact-retention-days:
        description: "Uploaded artifact retention time in days"
        default: 7
        required: false
        type: number

jobs:
  sonarqube-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Gradle unit test & coverage
        run: ./gradlew test
      - name: SonarQube evaluation
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  detekt-scan:
    runs-on: ubuntu-latest
    if: ${{ inputs.detekt-scan }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Detekt scan
        uses: natiginfo/action-detekt-all@1.21.0
        with:
          args: --max-issues 1000 --base-path /github/workspace/ --report sarif:detekt.sarif.json
      - name: Artifact Upload
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: detekt-scan
          path: "detekt.sarif.json"
          retention-days: ${{ inputs.artifact-retention-days }}
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "detekt.sarif.json"
          checkout_path: ${{ github.workspace }}

  cyclonedx-sbom:
    runs-on: ubuntu-latest
    if: ${{ inputs.cyclonedx-sbom }}
    needs: [sonarqube-scan, detekt-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Generate SBOM
        run: ./gradlew cyclonedxBom -info
      - name: Artifact Upload
        uses: actions/upload-artifact@v3
        if: ${{ inputs.upload-artifact }}
        with:
          name: cyclonedx-sbom
          path: build/reports/app-sbom.json
          retention-days: ${{ inputs.artifact-retention-days }}

  trivy-sbom:
    runs-on: ubuntu-latest
    needs: [sonarqube-scan, detekt-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Gradle build jar for scanning
        run: |
          ./gradlew bootJar --exclude-task test
          set -x; echo "ARTIFACT_PATH=build/libs/$(basename $(./gradlew --quiet bootJarPath))" >> $GITHUB_ENV
      - name: Run Trivy for SBOM generation in CycloneDX format
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'rootfs'
          scan-ref: "${{ env.ARTIFACT_PATH }}"
          format: 'cyclonedx'
          output: 'trivy-sbom.json'
          github-pat: ${{ secrets.GHCR_TOKEN }}
      - name: Run Trivy for SBOM generation and submit results to Dependency Snapshots
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'rootfs'
          scan-ref: "${{ env.ARTIFACT_PATH }}"
          format: 'github'
          output: 'dependency-results.sbom.json'
          github-pat: ${{ secrets.GHCR_TOKEN }}
      - name: Artifact Upload
        uses: actions/upload-artifact@v3
        if: ${{ inputs.upload-artifact }}
        with:
          name: trivy-sbom
          path: 'trivy-sbom.json'
          retention-days: ${{ inputs.artifact-retention-days }}

  trivy-vuln:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ trivy-sbom ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Gradle build jar for scanning
        run: |
          ./gradlew bootJar --exclude-task test
          set -x; echo "ARTIFACT_PATH=build/libs/$(basename $(./gradlew --quiet bootJarPath))" >> $GITHUB_ENV
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'rootfs'
          scan-ref: "${{ env.ARTIFACT_PATH }}"
          format: 'sarif'
          output: 'trivy-vuln.sarif'
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-vuln.sarif'
      - name: Artifact Upload
        uses: actions/upload-artifact@v3
        if: ${{ inputs.upload-artifact }}
        with:
          name: trivy-vuln
          path: 'trivy-vuln.sarif'
          retention-days: ${{ inputs.artifact-retention-days }}



